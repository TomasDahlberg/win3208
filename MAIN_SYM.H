/*
!  file main_symTable.h generated from main.idc at Wed Jul 27 10:08:25 1994
!  by translator IDCC, version 1.71
*/
#define GT_diff (double) 10
#define TA1_Pid_Rumsreglering (int) 2
#define TA1_Pid_Stillestand (int) 1
#define TA1_Pid_Tilluft (int) 0
#define TA1_Sekvens_VVX (int) 3
#define TA1_Sekvens_Vbatt (int) 4
#define TA1_Sekvens_dodzon (int) 2
#define TA1_Sekvens_kyla (int) 1
#define TA1_fukt_timer (int) 1
#define TA1_pid_Frekv (int) 3
#define TA1_timer (int) 0
#define TA2_Pid_Rumsreglering (int) 6
#define TA2_Pid_Stillestand (int) 5
#define TA2_Pid_Tilluft (int) 4
#define TA2_Sekvens_VVX (int) 3
#define TA2_Sekvens_Vbatt (int) 4
#define TA2_Sekvens_dodzon (int) 2
#define TA2_Sekvens_kyla (int) 1
#define TA2_fukt_timer (int) 3
#define TA2_pid_Frekv (int) 7
#define TA2_timer (int) 2
#define NO_OF_CAL_ENTRIES 10
typedef struct {
  unsigned short day[NO_OF_CAL_ENTRIES];
  unsigned short stopday[NO_OF_CAL_ENTRIES];
  unsigned char  color[NO_OF_CAL_ENTRIES];
  unsigned short start[NO_OF_CAL_ENTRIES];
  unsigned short stop[NO_OF_CAL_ENTRIES];
} CALENDAR;
struct _remote {
  long timeStamp;
};
struct _datamodule {
    int    AI8_1;
    int    AI8_2;
    double Aq1_1;
    double Aq1_2;
    double Aq1_3;
    double Aq1_4;
    double Aq2_1;
    double Aq2_2;
    double Aq2_3;
    double Aq2_4;
    int    Aterstallning;
    int    Auto;
    int    Brandrela;
    int    Day;
    int    Daycolor;
    int    Dq5_1;
    int    Dq5_2;
    int    Dq5_3;
    int    Dq5_4;
    int    Dq5_5;
    int    Dq5_6;
    int    Dq5_7;
    int    Dq5_8;
    double GP11_diff;
    double GT34;
    double GT34_L;
    int    GT34_fel;
    double GT34_filt;
    double GT34_korr;
    double GT41;
    double GT41_L;
    int    GT41_fel;
    double GT41_filt;
    double GT41_korr;
    int    Hour;
    int    Kort_6;
    int    Kort_7;
    double Max;
    double Min;
    int    Minute;
    int    Month;
    int    Omk_Fel;
    int    Second;
    int    Sleep;
    double TA1_Bor_StoppAgg;
    double TA1_ForFrysgrans;
    int    TA1_Forfrys;
    double TA1_Frekv;
    int    TA1_Frys;
    double TA1_Frysgrans;
    int    TA1_Frysskydd;
    double TA1_GP11;
    double TA1_GP11_D;
    double TA1_GP11_I;
    double TA1_GP11_P;
    double TA1_GP11_av;
    double TA1_GP11_bv;
    int    TA1_GP11_fel;
    double TA1_GP11_filt;
    double TA1_GP11_k;
    double TA1_GP11_ll;
    double TA1_GP11_m;
    int    TA1_GP21;
    int    TA1_GP21_delay;
    int    TA1_GP21_larm;
    int    TA1_GP31;
    int    TA1_GP31_delay;
    int    TA1_GP31_larm;
    double TA1_GT11;
    double TA1_GT11_L;
    int    TA1_GT11_fel;
    double TA1_GT11_filt;
    double TA1_GT11_korr;
    double TA1_GT31;
    double TA1_GT31_L;
    int    TA1_GT31_delay;
    int    TA1_GT31_fel;
    double TA1_GT31_filt;
    double TA1_GT31_korr;
    int    TA1_GT31_ravv;
    double TA1_GT31avv;
    double TA1_GT32;
    double TA1_GT32_L;
    int    TA1_GT32_fel;
    double TA1_GT32_filt;
    double TA1_GT32_korr;
    double TA1_GT33;
    double TA1_GT33_L;
    int    TA1_GT33_fel;
    double TA1_GT33_filt;
    double TA1_GT33_korr;
    double TA1_GT33bor;
    double TA1_GT51;
    double TA1_GT51_L;
    int    TA1_GT51_fel;
    double TA1_GT51_filt;
    double TA1_GT51_korr;
    double TA1_I_Kyla;
    double TA1_I_Rum;
    double TA1_I_Still;
    double TA1_I_VVX;
    double TA1_I_Varme;
    int    TA1_Ksvar;
    int    TA1_Kyla_enable;
    int    TA1_Kylsparr;
    int    TA1_MV1;
    double TA1_Maxtilluft;
    double TA1_Mintilluft;
    int    TA1_P1_Ostrom;
    double TA1_P_Kyla;
    double TA1_P_Rum;
    double TA1_P_Still;
    double TA1_P_VVX;
    double TA1_P_Varme;
    int    TA1_Powerup;
    double TA1_Reg_Kyla;
    double TA1_Reg_VVX;
    int    TA1_Rumsreglering;
    int    TA1_ST11;
    double TA1_SV21;
    double    TA1_SV21_Y[2];
    int    TA1_Sekvens;
    double TA1_Tilluftbor;
    double TA1_VVX;
    int    TA1_VVX_enable;
    int    TA1_VVX_larm;
    int    TA1_Vbatt_enable;
    double TA1_Vgrad;
    int    TA1_blockdelay;
    int    TA1_delay_drfel;
    int    TA1_fel_Frekv;
    int    TA1_ingen_eff;
    int    TA1_kylsparr;
    int    TA1_larm;
    int    TA1_start;
    int    TA1_start_frekv;
    int    TA1_startdelay;
    CALENDAR TA1_tid;
    int    TA1_trydelay;
    double TA2_Bor_StoppAgg;
    double TA2_ForFrysgrans;
    int    TA2_Forfrys;
    double TA2_Frekv;
    int    TA2_Frys;
    double TA2_Frysgrans;
    int    TA2_Frysskydd;
    double TA2_GP11;
    double TA2_GP11_D;
    double TA2_GP11_I;
    double TA2_GP11_P;
    double TA2_GP11_av;
    double TA2_GP11_bv;
    int    TA2_GP11_fel;
    double TA2_GP11_filt;
    double TA2_GP11_k;
    double TA2_GP11_ll;
    double TA2_GP11_m;
    int    TA2_GP21;
    int    TA2_GP21_delay;
    int    TA2_GP21_larm;
    int    TA2_GP31;
    int    TA2_GP31_delay;
    int    TA2_GP31_larm;
    double TA2_GT11;
    double TA2_GT11_L;
    int    TA2_GT11_fel;
    double TA2_GT11_filt;
    double TA2_GT11_korr;
    double TA2_GT31;
    double TA2_GT31_L;
    int    TA2_GT31_delay;
    int    TA2_GT31_fel;
    double TA2_GT31_filt;
    double TA2_GT31_korr;
    int    TA2_GT31_ravv;
    double TA2_GT31avv;
    double TA2_GT32;
    double TA2_GT32_L;
    int    TA2_GT32_fel;
    double TA2_GT32_filt;
    double TA2_GT32_korr;
    double TA2_GT33;
    double TA2_GT33_L;
    int    TA2_GT33_fel;
    double TA2_GT33_filt;
    double TA2_GT33_korr;
    double TA2_GT33bor;
    double TA2_GT51;
    double TA2_GT51_L;
    int    TA2_GT51_fel;
    double TA2_GT51_filt;
    double TA2_GT51_korr;
    double TA2_I_Kyla;
    double TA2_I_Rum;
    double TA2_I_Still;
    double TA2_I_VVX;
    double TA2_I_Varme;
    int    TA2_Ksvar;
    int    TA2_Kyla_enable;
    int    TA2_Kylsparr;
    int    TA2_MV2;
    double TA2_Maxtilluft;
    double TA2_Mintilluft;
    int    TA2_P2_Ostrom;
    double TA2_P_Kyla;
    double TA2_P_Rum;
    double TA2_P_Still;
    double TA2_P_VVX;
    double TA2_P_Varme;
    int    TA2_Powerup;
    double TA2_Reg_Kyla;
    double TA2_Reg_VVX;
    int    TA2_Rumsreglering;
    int    TA2_ST11;
    double TA2_SV21;
    double    TA2_SV21_Y[2];
    int    TA2_Sekvens;
    double TA2_Tilluftbor;
    double TA2_VVX;
    int    TA2_VVX_enable;
    int    TA2_VVX_larm;
    int    TA2_Vbatt_enable;
    double TA2_Vgrad;
    int    TA2_blockdelay;
    int    TA2_delay_drfel;
    int    TA2_fel_Frekv;
    int    TA2_ingen_eff;
    int    TA2_kylsparr;
    int    TA2_larm;
    int    TA2_start;
    int    TA2_start_frekv;
    int    TA2_startdelay;
    CALENDAR TA2_tid;
    int    TA2_trydelay;
    struct _remote _remoterVar_001;
    double Ute;
    double Utetemp;
    int    Vi_TA1_drfel;
    int    Vi_TA2_drfel;
    int    Weekday;
    int    Weekno;
    int    Weekyear;
    int    Year;
    int    (*account)();
    int    (*aifilt)();
    int    (*alarm_active)();
    int    (*battLow)();
    int    (*blockSNPKkeyboard)();
    int    (*bypassSNPKrelay)();
    int    (*calActiveIn)();
    int    (*checkCalendarLevel)();
    int    (*clearCode)();
    int    (*display)();
    double    (*enter)();
    int    (*enter_calendar)();
    int    (*enter_kurva)();
    double    (*exp)();
    double    (*fabs)();
    int    (*fuktkyl)();
    int    (*getAlarmSNPK)();
    int    (*getRelTime)();
    int    (*getTime)();
    int    (*h2ovbatt)();
    int    (*isTimerInit)();
    int    (*key)();
    double    (*kurva)();
    int    level;
    int    level1;
    int    level2;
    int    level3;
    int    level4;
    int    level5;
    int    noOfAck_A;
    int    noOfAck_B;
    int    noOfAck_C;
    int    noOfAck_D;
    int    noOfNak_A;
    int    noOfNak_B;
    int    noOfNak_C;
    int    noOfNak_D;
    int    nodeUp;
    int    (*optoPower)();
    int    overflow;
    int    (*password)();
    double    (*pid)();
    double    (*pow)();
    int    powerup;
    double    (*rotvvx)();
    int    (*rumsregp)();
    int    service;
    int    serviceLed;
    int    (*setAlarmSNPK)();
    int    (*setCode)();
    int    (*setSafeCode)();
    int    (*setTime)();
    int    (*set_time)();
    int    (*sleep)();
    double    (*sqrt)();
    int    (*tastart)();
    int    (*tempfilt)();
    int    (*timerCancel)();
    int    (*timerInit)();
    int    (*timerReady)();
    int    (*tsleep)();
    int    (*tvpump)();
    int    (*xxxswdctime)();
    char  AI8_1_lock;
    char  AI8_2_lock;
    char  Aq1_1_lock;
    char  Aq1_2_lock;
    char  Aq1_3_lock;
    char  Aq1_4_lock;
    char  Aq2_1_lock;
    char  Aq2_2_lock;
    char  Aq2_3_lock;
    char  Aq2_4_lock;
    char  Aterstallning_lock;
    char  Auto_lock;
    char  Brandrela_lock;
    char  Day_lock;
    char  Daycolor_lock;
    char  Dq5_1_lock;
    char  Dq5_2_lock;
    char  Dq5_3_lock;
    char  Dq5_4_lock;
    char  Dq5_5_lock;
    char  Dq5_6_lock;
    char  Dq5_7_lock;
    char  Dq5_8_lock;
    char  GP11_diff_lock;
    char  GT34_lock;
    char  GT34_L_lock;
    char  GT34_fel_lock;
    char  GT34_filt_lock;
    char  GT34_korr_lock;
    char  GT41_lock;
    char  GT41_L_lock;
    char  GT41_fel_lock;
    char  GT41_filt_lock;
    char  GT41_korr_lock;
    char  Hour_lock;
    char  Kort_6_lock;
    char  Kort_7_lock;
    char  Max_lock;
    char  Min_lock;
    char  Minute_lock;
    char  Month_lock;
    char  Omk_Fel_lock;
    char  Second_lock;
    char  Sleep_lock;
    char  TA1_Bor_StoppAgg_lock;
    char  TA1_ForFrysgrans_lock;
    char  TA1_Forfrys_lock;
    char  TA1_Frekv_lock;
    char  TA1_Frys_lock;
    char  TA1_Frysgrans_lock;
    char  TA1_Frysskydd_lock;
    char  TA1_GP11_lock;
    char  TA1_GP11_D_lock;
    char  TA1_GP11_I_lock;
    char  TA1_GP11_P_lock;
    char  TA1_GP11_av_lock;
    char  TA1_GP11_bv_lock;
    char  TA1_GP11_fel_lock;
    char  TA1_GP11_filt_lock;
    char  TA1_GP11_k_lock;
    char  TA1_GP11_ll_lock;
    char  TA1_GP11_m_lock;
    char  TA1_GP21_lock;
    char  TA1_GP21_delay_lock;
    char  TA1_GP21_larm_lock;
    char  TA1_GP31_lock;
    char  TA1_GP31_delay_lock;
    char  TA1_GP31_larm_lock;
    char  TA1_GT11_lock;
    char  TA1_GT11_L_lock;
    char  TA1_GT11_fel_lock;
    char  TA1_GT11_filt_lock;
    char  TA1_GT11_korr_lock;
    char  TA1_GT31_lock;
    char  TA1_GT31_L_lock;
    char  TA1_GT31_delay_lock;
    char  TA1_GT31_fel_lock;
    char  TA1_GT31_filt_lock;
    char  TA1_GT31_korr_lock;
    char  TA1_GT31_ravv_lock;
    char  TA1_GT31avv_lock;
    char  TA1_GT32_lock;
    char  TA1_GT32_L_lock;
    char  TA1_GT32_fel_lock;
    char  TA1_GT32_filt_lock;
    char  TA1_GT32_korr_lock;
    char  TA1_GT33_lock;
    char  TA1_GT33_L_lock;
    char  TA1_GT33_fel_lock;
    char  TA1_GT33_filt_lock;
    char  TA1_GT33_korr_lock;
    char  TA1_GT33bor_lock;
    char  TA1_GT51_lock;
    char  TA1_GT51_L_lock;
    char  TA1_GT51_fel_lock;
    char  TA1_GT51_filt_lock;
    char  TA1_GT51_korr_lock;
    char  TA1_I_Kyla_lock;
    char  TA1_I_Rum_lock;
    char  TA1_I_Still_lock;
    char  TA1_I_VVX_lock;
    char  TA1_I_Varme_lock;
    char  TA1_Ksvar_lock;
    char  TA1_Kyla_enable_lock;
    char  TA1_Kylsparr_lock;
    char  TA1_MV1_lock;
    char  TA1_Maxtilluft_lock;
    char  TA1_Mintilluft_lock;
    char  TA1_P1_Ostrom_lock;
    char  TA1_P_Kyla_lock;
    char  TA1_P_Rum_lock;
    char  TA1_P_Still_lock;
    char  TA1_P_VVX_lock;
    char  TA1_P_Varme_lock;
    char  TA1_Powerup_lock;
    char  TA1_Reg_Kyla_lock;
    char  TA1_Reg_VVX_lock;
    char  TA1_Rumsreglering_lock;
    char  TA1_ST11_lock;
    char  TA1_SV21_lock;
    char  TA1_SV21_Y_lock;
    char  TA1_Sekvens_lock;
    char  TA1_Tilluftbor_lock;
    char  TA1_VVX_lock;
    char  TA1_VVX_enable_lock;
    char  TA1_VVX_larm_lock;
    char  TA1_Vbatt_enable_lock;
    char  TA1_Vgrad_lock;
    char  TA1_blockdelay_lock;
    char  TA1_delay_drfel_lock;
    char  TA1_fel_Frekv_lock;
    char  TA1_ingen_eff_lock;
    char  TA1_kylsparr_lock;
    char  TA1_larm_lock;
    char  TA1_start_lock;
    char  TA1_start_frekv_lock;
    char  TA1_startdelay_lock;
    char  TA1_tid_lock;
    char  TA1_trydelay_lock;
    char  TA2_Bor_StoppAgg_lock;
    char  TA2_ForFrysgrans_lock;
    char  TA2_Forfrys_lock;
    char  TA2_Frekv_lock;
    char  TA2_Frys_lock;
    char  TA2_Frysgrans_lock;
    char  TA2_Frysskydd_lock;
    char  TA2_GP11_lock;
    char  TA2_GP11_D_lock;
    char  TA2_GP11_I_lock;
    char  TA2_GP11_P_lock;
    char  TA2_GP11_av_lock;
    char  TA2_GP11_bv_lock;
    char  TA2_GP11_fel_lock;
    char  TA2_GP11_filt_lock;
    char  TA2_GP11_k_lock;
    char  TA2_GP11_ll_lock;
    char  TA2_GP11_m_lock;
    char  TA2_GP21_lock;
    char  TA2_GP21_delay_lock;
    char  TA2_GP21_larm_lock;
    char  TA2_GP31_lock;
    char  TA2_GP31_delay_lock;
    char  TA2_GP31_larm_lock;
    char  TA2_GT11_lock;
    char  TA2_GT11_L_lock;
    char  TA2_GT11_fel_lock;
    char  TA2_GT11_filt_lock;
    char  TA2_GT11_korr_lock;
    char  TA2_GT31_lock;
    char  TA2_GT31_L_lock;
    char  TA2_GT31_delay_lock;
    char  TA2_GT31_fel_lock;
    char  TA2_GT31_filt_lock;
    char  TA2_GT31_korr_lock;
    char  TA2_GT31_ravv_lock;
    char  TA2_GT31avv_lock;
    char  TA2_GT32_lock;
    char  TA2_GT32_L_lock;
    char  TA2_GT32_fel_lock;
    char  TA2_GT32_filt_lock;
    char  TA2_GT32_korr_lock;
    char  TA2_GT33_lock;
    char  TA2_GT33_L_lock;
    char  TA2_GT33_fel_lock;
    char  TA2_GT33_filt_lock;
    char  TA2_GT33_korr_lock;
    char  TA2_GT33bor_lock;
    char  TA2_GT51_lock;
    char  TA2_GT51_L_lock;
    char  TA2_GT51_fel_lock;
    char  TA2_GT51_filt_lock;
    char  TA2_GT51_korr_lock;
    char  TA2_I_Kyla_lock;
    char  TA2_I_Rum_lock;
    char  TA2_I_Still_lock;
    char  TA2_I_VVX_lock;
    char  TA2_I_Varme_lock;
    char  TA2_Ksvar_lock;
    char  TA2_Kyla_enable_lock;
    char  TA2_Kylsparr_lock;
    char  TA2_MV2_lock;
    char  TA2_Maxtilluft_lock;
    char  TA2_Mintilluft_lock;
    char  TA2_P2_Ostrom_lock;
    char  TA2_P_Kyla_lock;
    char  TA2_P_Rum_lock;
    char  TA2_P_Still_lock;
    char  TA2_P_VVX_lock;
    char  TA2_P_Varme_lock;
    char  TA2_Powerup_lock;
    char  TA2_Reg_Kyla_lock;
    char  TA2_Reg_VVX_lock;
    char  TA2_Rumsreglering_lock;
    char  TA2_ST11_lock;
    char  TA2_SV21_lock;
    char  TA2_SV21_Y_lock;
    char  TA2_Sekvens_lock;
    char  TA2_Tilluftbor_lock;
    char  TA2_VVX_lock;
    char  TA2_VVX_enable_lock;
    char  TA2_VVX_larm_lock;
    char  TA2_Vbatt_enable_lock;
    char  TA2_Vgrad_lock;
    char  TA2_blockdelay_lock;
    char  TA2_delay_drfel_lock;
    char  TA2_fel_Frekv_lock;
    char  TA2_ingen_eff_lock;
    char  TA2_kylsparr_lock;
    char  TA2_larm_lock;
    char  TA2_start_lock;
    char  TA2_start_frekv_lock;
    char  TA2_startdelay_lock;
    char  TA2_tid_lock;
    char  TA2_trydelay_lock;
    char  Ute_lock;
    char  Utetemp_lock;
    char  Vi_TA1_drfel_lock;
    char  Vi_TA2_drfel_lock;
    char  Weekday_lock;
    char  Weekno_lock;
    char  Weekyear_lock;
    char  Year_lock;
    char  account_lock;
    char  aifilt_lock;
    char  alarm_active_lock;
    char  battLow_lock;
    char  blockSNPKkeyboard_lock;
    char  bypassSNPKrelay_lock;
    char  calActiveIn_lock;
    char  checkCalendarLevel_lock;
    char  clearCode_lock;
    char  display_lock;
    char  enter_lock;
    char  enter_calendar_lock;
    char  enter_kurva_lock;
    char  exp_lock;
    char  fabs_lock;
    char  fuktkyl_lock;
    char  getAlarmSNPK_lock;
    char  getRelTime_lock;
    char  getTime_lock;
    char  h2ovbatt_lock;
    char  isTimerInit_lock;
    char  key_lock;
    char  kurva_lock;
    char  level_lock;
    char  level1_lock;
    char  level2_lock;
    char  level3_lock;
    char  level4_lock;
    char  level5_lock;
    char  noOfAck_A_lock;
    char  noOfAck_B_lock;
    char  noOfAck_C_lock;
    char  noOfAck_D_lock;
    char  noOfNak_A_lock;
    char  noOfNak_B_lock;
    char  noOfNak_C_lock;
    char  noOfNak_D_lock;
    char  nodeUp_lock;
    char  optoPower_lock;
    char  overflow_lock;
    char  password_lock;
    char  pid_lock;
    char  pow_lock;
    char  powerup_lock;
    char  rotvvx_lock;
    char  rumsregp_lock;
    char  service_lock;
    char  serviceLed_lock;
    char  setAlarmSNPK_lock;
    char  setCode_lock;
    char  setSafeCode_lock;
    char  setTime_lock;
    char  set_time_lock;
    char  sleep_lock;
    char  sqrt_lock;
    char  tastart_lock;
    char  tempfilt_lock;
    char  timerCancel_lock;
    char  timerInit_lock;
    char  timerReady_lock;
    char  tsleep_lock;
    char  tvpump_lock;
    char  xxxswdctime_lock;
} *dm;    /* total size of struct = 2241 */

CALENDAR _tmp_TA1_tid = {
2079, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1800, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
CALENDAR _tmp_TA2_tid = {
2079, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1800, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
#define Ute_OFFSET 235
#define NAMEOFDATAMODULE "VARS"
#define NAMEOFDATAMODULE2 "VAR2"
#define DATAMODULE_ADDRESS 0x20000
extern int account(); 
extern int aifilt(); 
extern int alarm_active(); 
extern int battLow(); 
extern int blockSNPKkeyboard(); 
extern int bypassSNPKrelay(); 
extern int calActiveIn(); 
extern int checkCalendarLevel(); 
extern int clearCode(); 
extern int display(); 
extern double enter(); 
extern int enter_calendar(); 
extern int enter_kurva(); 
extern double exp(); 
extern double fabs(); 
extern int fuktkyl(); 
extern int getAlarmSNPK(); 
extern int getRelTime(); 
extern int getTime(); 
extern int h2ovbatt(); 
extern int isTimerInit(); 
extern int key(); 
extern double kurva(); 
extern int optoPower(); 
extern int password(); 
extern double pid(); 
extern double pow(); 
extern double rotvvx(); 
extern int rumsregp(); 
extern int setAlarmSNPK(); 
extern int setCode(); 
extern int setSafeCode(); 
extern int setTime(); 
extern int set_time(); 
extern int sleep(); 
extern double sqrt(); 
extern int tastart(); 
extern int tempfilt(); 
extern int timerCancel(); 
extern int timerInit(); 
extern int timerReady(); 
extern int tsleep(); 
extern int tvpump(); 
extern char *xxxswdctime();
extern int account(); 
extern int aifilt(); 
extern int alarm_active(); 
extern int battLow(); 
extern int blockSNPKkeyboard(); 
extern int bypassSNPKrelay(); 
extern int calActiveIn(); 
extern int checkCalendarLevel(); 
extern int clearCode(); 
extern int display(); 
extern double enter(); 
extern int enter_calendar(); 
extern int enter_kurva(); 
extern double exp(); 
extern double fabs(); 
extern int fuktkyl(); 
extern int getAlarmSNPK(); 
extern int getRelTime(); 
extern int getTime(); 
extern int h2ovbatt(); 
extern int isTimerInit(); 
extern int key();
extern double kurva();
extern int optoPower(); 
extern int password(); 
extern double pid(); 
extern double pow(); 
extern double rotvvx(); 
extern int rumsregp(); 
extern int setAlarmSNPK(); 
extern int setCode(); 
extern int setSafeCode(); 
extern int setTime(); 
extern int set_time(); 
extern int sleep(); 
extern double sqrt(); 
extern int tastart(); 
extern int tempfilt(); 
extern int timerCancel(); 
extern int timerInit(); 
extern int timerReady(); 
extern int tsleep(); 
extern int tvpump(); 
extern char *xxxswdctime();
#define NO_OF_ALARMS 31
#define NO_OF_TIMERS 1
struct _lockModule {
  int noOfAlarms;
  int alarmLock[NO_OF_ALARMS];
  int noOfTimers;
  int timerLock[NO_OF_TIMERS];
} *lock; /* total size of struct = 136 */
